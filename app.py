import streamlit as st
import pubchempy as pcp
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO
from fpdf import FPDF
from datetime import datetime
import plotly.graph_objects as go
from scipy.constants import epsilon_0, elementary_charge, Boltzmann
import firebase_admin
from firebase_admin import credentials, firestore
import json
import os

# ----------------------------
# 1. CONFIGURA√á√ïES INICIAIS
# ----------------------------
st.set_page_config(
    page_title="Simulador Profissional de Eletroforese", 
    layout="wide",
    page_icon="üî¨"
)

# ----------------------------
# 2. CLASSE DE SIMULA√á√ÉO CIENT√çFICA
# ----------------------------
class NernstPlanckSimulator:
    def __init__(self):
        self.constantes = {
            'epsilon_0': 8.854e-12,  # F/m
            'k_B': Boltzmann,         # J/K
            'e': elementary_charge    # C
        }
    
    def calcular_mobilidade(self, carga, raio, viscosidade, permissividade_rel, temperatura, forca_ionica):
        """Modelo completo com corre√ß√µes de Debye-H√ºckel e for√ßa i√¥nica"""
        eta = viscosidade * 1e-3  # cP para Pa¬∑s
        epsilon = permissividade_rel * self.constantes['epsilon_0']
        
        # Termo de Stokes-Einstein
        termo_stokes = (carga * self.constantes['e']) / (6 * np.pi * eta * raio)
        
        # Corre√ß√£o de Debye-H√ºckel
        raio_debye = np.sqrt(epsilon * self.constantes['k_B'] * temperatura / 
                          (self.constantes['e']**2 * forca_ionica * 1e3 * 6.022e23))
        fator_debye = 1 / (1 + raio/raio_debye)
        
        # Efeito da temperatura
        fator_temp = np.exp(298.15/temperatura - 1)
        
        return termo_stokes * fator_debye * fator_temp * 1e8  # Unidades pr√°ticas

# ----------------------------
# 3. CONFIGURA√á√ÉO DO FIREBASE (OPCIONAL)
# ----------------------------
def init_firebase():
    if not firebase_admin._apps:
        # Substitua pelo seu config ou arquivo JSON
        FIREBASE_CONFIG = {
            "type": "service_account",
            # ... (seus dados de configura√ß√£o)
        }
        cred = credentials.Certificate(FIREBASE_CONFIG)
        firebase_admin.initialize_app(cred)
    return firestore.client()

try:
    db = init_firebase()
    firebase_ready = True
except:
    firebase_ready = False
    st.warning("Modo offline ativado (Firebase n√£o configurado)")

# ----------------------------
# 4. FUN√á√ïES PRINCIPAIS
# ----------------------------
def buscar_molecula(nome):
    try:
        mol = pcp.get_compounds(nome, 'name')[0]
        return {
            "Nome": mol.iupac_name,
            "F√≥rmula": mol.molecular_formula,
            "Peso Molecular": mol.molecular_weight,
            "SMILES": mol.canonical_smiles,
            "CID": mol.cid,
            "Data": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    except Exception as e:
        st.error(f"Erro na busca: {str(e)}")
        return None

def gerar_relatorio_pdf(params, resultados):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    
    # Cabe√ßalho
    pdf.cell(0, 10, "Relat√≥rio Cient√≠fico de Eletroforese", ln=True, align='C')
    pdf.ln(10)
    
    # Par√¢metros
    pdf.cell(0, 10, f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}", ln=True)
    for key, value in params.items():
        pdf.cell(0, 10, f"{key}: {value}", ln=True)
    
    # Gr√°fico
    pdf.ln(10)
    pdf.cell(0, 10, "Cromatograma Simulado:", ln=True)
    pdf.image("temp_plot.png", x=10, w=180)
    
    return pdf

# ----------------------------
# 5. INTERFACE STREAMLIT
# ----------------------------
def main():
    st.title("üî¨ Simulador Profissional de Eletroforese Capilar")
    
    # Barra lateral
    with st.sidebar:
        st.header("Configura√ß√µes Globais")
        modo_avancado = st.checkbox("Modo Avan√ßado", True)
        if firebase_ready:
            st.success("Firebase Conectado")
        else:
            st.warning("Modo Local Ativo")
    
    # Abas principais
    tab1, tab2, tab3 = st.tabs(["Busca Molecular", "Simula√ß√£o", "Banco de Dados"])
    
    with tab1:
        st.header("üîç Busca no PubChem")
        nome_molecula = st.text_input("Digite o nome da mol√©cula (em ingl√™s):", "aspirin")
        
        if nome_molecula:
            with st.spinner("Buscando no PubChem..."):
                dados = buscar_molecula(nome_molecula)
            
            if dados:
                col1, col2 = st.columns(2)
                with col1:
                    st.json(dados)
                    if st.button("Salvar no Banco"):
                        if firebase_ready:
                            db.collection("moleculas").document(str(dados["CID"])).set(dados)
                            st.success("Salvo no Firebase!")
                with col2:
                    st.image(f"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/{dados['CID']}/PNG", 
                           caption=f"Estrutura 2D de {dados['Nome']}")
    
    with tab2:
        st.header("‚ö° Simula√ß√£o de Eletroforese")
        simulator = NernstPlanckSimulator()
        
        with st.expander("Par√¢metros da Simula√ß√£o", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                voltagem = st.slider("Voltagem (kV)", 5, 30, 15)
                comprimento = st.slider("Comprimento do Capilar (cm)", 10, 100, 50)
                temperatura = st.slider("Temperatura (¬∞C)", 15, 40, 25)
                
            with col2:
                pH = st.slider("pH do Tamp√£o", 2.0, 10.0, 7.0, 0.1)
                viscosidade = st.slider("Viscosidade (cP)", 0.8, 2.5, 1.0, 0.1)
                forca_ionica = st.slider("For√ßa I√¥nica (mM)", 10, 200, 50)
        
        if st.button("Executar Simula√ß√£o Completa"):
            # C√°lculos cient√≠ficos
            raio_estimado = 1e-9  # 1 nm como aproxima√ß√£o
            mobilidade = simulator.calcular_mobilidade(
                carga=2, 
                raio=raio_estimado,
                viscosidade=viscosidade,
                permissividade_rel=78.5,
                temperatura=temperatura + 273.15,
                forca_ionica=forca_ionica
            )
            
            # Simula√ß√£o do cromatograma
            tempo_migracao = (comprimento * 1e-2) / (mobilidade * 1e-8 * voltagem * 1e3)
            t = np.linspace(0, tempo_migracao * 1.5, 1000)
            y = np.exp(-(t - tempo_migracao)**2 / (2 * (tempo_migracao/10)**2)) * 100
            
            # Visualiza√ß√£o 3D
            fig_3d = go.Figure(data=[
                go.Scatter3d(
                    x=t,
                    y=[mobilidade] * len(t),
                    z=y,
                    mode='lines',
                    line=dict(width=8, color='purple')
                )
            ])
            fig_3d.update_layout(
                scene=dict(
                    xaxis_title='Tempo (s)',
                    yaxis_title='Mobilidade (10^-8 m¬≤/Vs)',
                    zaxis_title='Intensidade'
                ),
                title='Perfil 3D da Separa√ß√£o'
            )
            
            # Mostrar resultados
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(fig_3d, use_container_width=True)
            with col2:
                st.metric("Tempo de Migra√ß√£o", f"{tempo_migracao:.2f} s")
                st.metric("Mobilidade Calculada", f"{mobilidade:.2e} x10‚Åª‚Å∏ m¬≤/Vs")
                
                # Gerar PDF
                pdf = gerar_relatorio_pdf(
                    params={
                        "Voltagem": f"{voltagem} kV",
                        "Comprimento": f"{comprimento} cm",
                        "Temperatura": f"{temperatura} ¬∞C",
                        "pH": pH,
                        "For√ßa I√¥nica": f"{forca_ionica} mM"
                    },
                    resultados={
                        "Tempo Migra√ß√£o": tempo_migracao,
                        "Mobilidade": mobilidade
                    }
                )
                
                st.download_button(
                    label="üì• Baixar Relat√≥rio Completo",
                    data=pdf.output(dest='S').encode('latin1'),
                    file_name="relatorio_eletroforese.pdf",
                    mime="application/pdf"
                )
    
    with tab3:
        st.header("üìä Banco de Dados")
        if firebase_ready:
            docs = db.collection("moleculas").stream()
            dados = [doc.to_dict() for doc in docs]
            st.dataframe(pd.DataFrame(dados))
        else:
            st.warning("Conecte-se ao Firebase para ativar esta funcionalidade")

if __name__ == "__main__":
    main()
